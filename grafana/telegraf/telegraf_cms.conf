# Telegraf Configuration

[global_tags]
  system_type = "CMS"

# Configuration for telegraf agent
[agent]
  interval = "5s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""
  hostname = "cms_webrtc"
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  urls = ["http://172.100.44.33:8086"] # required
  database = "telegraf" # required
  retention_policy = ""
  write_consistency = "any"
  timeout = "5s"
  username = "claudi"
  password = "Asd123"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]

# Read metrics about memory usage
[[inputs.mem]]

# Get the number of processes and group them by status
[[inputs.processes]]

# Read metrics about swap memory usage
[[inputs.swap]]

# Read metrics about system load & uptime
[[inputs.system]]

# Monitor disks' temperatures using hddtemp
# [[inputs.hddtemp]]

[[inputs.net]]

# Monitor process cpu and memory usage
[[inputs.procstat]]
  pattern = "java|postgres|nativeRTPunit-x86_64|cla|ffmpeg|NSSserver|nuance-server|dockerd|docker-containerd|docker-containerd-shim"
  pid_tag = true

# Monitor sensors, requires lm-sensors package
#[[inputs.sensors]]

# # Provides Linux sysctl fs metrics
 [[inputs.linux_sysctl_fs]]

# # This plugin gathers interrupts data from /proc/interrupts and /proc/softirqs.
 [[inputs.interrupts]]

 [[inputs.conntrack]]

 [[inputs.netstat]]

# # Collect kernel snmp counters and network interface statistics
 [[inputs.nstat]]

# # Read metrics from storage devices supporting S.M.A.R.T.
#[[inputs.smart]]

# # Read metrics from one or many postgresql servers
 [[inputs.postgresql]]
   address = "host=localhost user=postgres password=CmsDbAdmin!. sslmode=disable"
   max_lifetime = "0s"
   databases = ["cms-recorder"]

 [[inputs.postgresql_extensible]]
    address = "host=localhost user=postgres password=CmsDbAdmin!. sslmode=disable"
    databases = ["postgres","cms-recorder"]
  [[inputs.postgresql_extensible.query]]
    sqlquery="select count(1) as amount, state from pg_stat_activity where usename != 'telegraf' group by state"
    version=901
    withdbname=false
    tagvalue="state"
    measurement="pg_connections"
  [[inputs.postgresql_extensible.query]]
    sqlquery="SELECT pg_database.datname as schema_name, pg_database_size(pg_database.datname) AS size from pg_database"
    version=901
    withdbname=false
    tagvalue="schema_name"
    measurement="pg_schemas_size"

 [[inputs.postgresql_extensible]]
    address = "host=localhost user=postgres password=CmsDbAdmin!. sslmode=disable dbname=cms-recorder"
    databases = ["postgres","cms-recorder"]
  [[inputs.postgresql_extensible.query]]
    sqlquery="select count(*) as recorded from \"cms-recorder\".public.\"Recordings\""
    version=901
    withdbname=false
    tagvalue=""
    measurement="CMS_DB"
  [[inputs.postgresql_extensible.query]]
    sqlquery="select count(*) as backuped from \"cms-recorder\".public.\"Recordings\" where backupstatus=true"
    version=901
    withdbname=false
    tagvalue=""
    measurement="CMS_DB"
  [[inputs.postgresql_extensible.query]]
    sqlquery="select count(*) as erased from \"cms-recorder\".public.\"Recordings\" where erasedstatus=true"
    version=901
    withdbname=false
    tagvalue=""
    measurement="CMS_DB"
  [[inputs.postgresql_extensible.query]]
    sqlquery="select count(*) as erasedWithBackup from \"cms-recorder\".public.\"Recordings\" where erasedstatus=true and backupstatus=true"
    version=901
    withdbname=false
    tagvalue=""
    measurement="CMS_DB"
  [[inputs.postgresql_extensible.query]]
    sqlquery="select count(*) as ErasedWithoutBackup from \"cms-recorder\".public.\"Recordings\" where erasedstatus=true and backupstatus=false"
    version=901
    withdbname=false
    tagvalue=""
    measurement="CMS_DB"
  [[inputs.postgresql_extensible.query]]
    sqlquery="select count(*) as CTI from cti"
    version=901
    withdbname=false
    tagvalue=""
    measurement="CMS_DB"

# Read JMX metrics from a Jolokia REST agent endpoint
 [[inputs.jolokia2_agent]]
   urls = ["https://localhost:7443/jolokia-war-1.3.5"]
   insecure_skip_verify = true
#   ## Add metrics to read
   [[inputs.jolokia2_agent.metric]]
     name  = "CMS_streaming-mps_Components"
     mbean = "com.cycos.media.ApplicationHost:aspect=monitor,name=streaming-mps,type=Components"
   [[inputs.jolokia2_agent.metric]]
     name  = "CMS_sip-connectivity_Components"
     mbean = "com.cycos.media.ApplicationHost:aspect=monitor,name=sip-connectivity,type=Components"
   [[inputs.jolokia2_agent.metric]]
     name  = "CMS_paas-connectivity_Components"
     mbean = "com.cycos.media.ApplicationHost:aspect=monitor,name=paas-connectivity,type=Components"
   [[inputs.jolokia2_agent.metric]]
     name  = "CMS_turn_Components"
     mbean = "com.cycos.media.ApplicationHost:aspect=monitor,name=turn,type=Components"
  [[inputs.jolokia2_agent.metric]]
     name  = "CMS_AF-Provider_Components"
     mbean = "com.cycos.media.ApplicationHost:aspect=monitor,name=AF-Provider,type=Components"
     paths = ["NumberOfSessions"]
   [[inputs.jolokia2_agent.metric]]
     name  = "CMS_java-lang_Memory"
     mbean = "java.lang:type=Memory"
   [[inputs.jolokia2_agent.metric]]
     name  = "CMS_java-lang_Threading"
     mbean = "java.lang:type=Threading"

 #[[inputs.http]]
   #urls = ["https://localhost:7443/jolokia-war-1.3.5/read/com.cycos.media.ApplicationHost:aspect=sanity,name=streaming-mps,type=Components"]
   #data_format = "json"
   #json_query = "value.SanityInfo.CheckItems"

# Collect statistics about itself
 [[inputs.internal]]

 [[inputs.exec]]
  #commands = ['''sh -c "echo \"$( cat /opt/cmsversion | tr '_|)' ' ' | awk '{ print $1 $2\" \" $7\"/\"$8\"/\"$9\" \"$10\":\"$11\":\"$12 }' )\"" ''']
  commands = ['''sh -c "echo \"$( cat /opt/cmsversion )\"" ''']
  timeout = "5s"
  data_format = "value"
  data_type = "string"
  [inputs.exec.tags]
    type="cmsversion"

[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_names = []
  source_tag = false
  timeout = "5s"
  perdevice = true
  total = true
  tag_env = ["JAVA_HOME", "HEAP_SIZE"]
  #namepass = ["usage_*", "io_service_bytes_recursive_*", "uptime_ns" ]

 [[inputs.exec]]
  commands = ['''sh -c "curl --insecure https://localhost:7443/jolokia-war-1.3.5/exec/com.cycos.media.ApplicationHost:aspect=rtc-services,name=rtc,type=Components/getCallControlServices" ''']
  timeout = "5s"
  data_format = "json"
  json_strict = true
  json_query = "value.oscc.Value.ServerRegistrations"
  tag_keys = [ "AccountId"]
  json_string_fields = ["Id", "RemainingLeaseTime"]
    [inputs.exec.tags]
      type="WebRTCaccounts"

[[inputs.exec]]
  commands = ['''sh -c "curl --insecure https://localhost:7443/jolokia-war-1.3.5/read/com.cycos.media.ApplicationHost:aspect=sanity,name=sip-connectivity,type=Components | sed 's/'\''|SipProvider bound to '\''<TCP> \|SIP server '\''cms-sip-server'\'': |'\''//g'" ''']
  timeout = "5s"
  name_override = "CMS_sip-connectivity_Components_Sanity"
  data_format = "json"
  json_strict = true
  json_query = "value.SanityInfo.CheckItems"
  tag_keys = [ "Description"]
  json_string_fields = ["Status", "Description"]

[[inputs.exec]]
  commands = ['''sh -c "curl --insecure https://localhost:7443/jolokia-war-1.3.5/read/com.cycos.media.ApplicationHost:aspect=sanity,name=streaming-mps,type=Components" ''']
  timeout = "5s"
  name_override = "CMS_streaming-mps_Components_Sanity"
  data_format = "json"
  json_strict = true
  json_query = "value.SanityInfo.CheckItems"
  tag_keys = [ "Description"]
  json_string_fields = ["Status", "Description"]
